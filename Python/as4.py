# -*- coding: utf-8 -*-
"""As4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qFL_t3N7Q4PifPirjHNdcALApSG63uTW
"""

import numpy as np
import pandas as pd
import matplotlib as mpl
import scipy
import matplotlib.pyplot as plt
from pylab import rcParams
import urllib
import sklearn
from scipy import stats
from sklearn.neighbors import KNeighborsClassifier
from sklearn import neighbors
from sklearn import preprocessing
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, accuracy_score, roc_auc_score, plot_roc_curve, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
from sklearn.metrics import mean_squared_error

dftrain = pd.read_csv("/content/drive/MyDrive/a4/train.csv")
dftest = pd.read_csv("/content/drive/MyDrive/a4/test.csv")
dftrain.drop(columns = 'id',inplace=True)

dftrain

dftest

"""Value Checks"""

dftrain.isna().sum().sum()

mid = dftrain["total_bedrooms"].median()
mid

dftrain["total_bedrooms"].fillna(mid, inplace = True)

dftrain.isna().sum().sum()

mid = dftest["total_bedrooms"].median()
mid

dftest["total_bedrooms"].fillna(mid, inplace = True)

dftest.isna().sum().sum()

dftest

"""ocean prox is certainly important, but is not useable as it is. I will replace with One Hot Encoding"""

dftrain.replace("INLAND", 1, inplace = True)
dftrain.replace("<1H OCEAN", 2, inplace = True)
dftrain.replace("NEAR BAY", 3, inplace = True)
dftrain.replace("NEAR OCEAN", 4, inplace = True)
dftrain.replace("ISLAND", 5, inplace = True)
dftrain

"""Outlier Checks"""



"""Find Correlations"""

col = "median_house_value"
ax1 = dftrain.plot.scatter(col, "longitude")
ax2 = dftrain.plot.scatter(col, "latitude")
ax3 = dftrain.plot.scatter(col, "housing_median_age")
ax4 = dftrain.plot.scatter(col, "total_rooms")
ax5 = dftrain.plot.scatter(col, "total_bedrooms")
ax6 = dftrain.plot.scatter(col, "population")
ax7 = dftrain.plot.scatter(col, "households")
ax8 = dftrain.plot.scatter(col, "median_income")
ax9 = dftrain.plot.scatter(col, "ocean_proximity")

r = np.corrcoef(dftrain["median_house_value"], dftrain["longitude"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["latitude"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["housing_median_age"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["total_rooms"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["total_bedrooms"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["population"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["households"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["median_income"])
r

r = np.corrcoef(dftrain["median_house_value"], dftrain["ocean_proximity"])
r

"""standardization has no effect on linear regression, and will not be used

Build & Train for best Regression Model
"""

dftest.replace("INLAND", 1, inplace = True)
dftest.replace("<1H OCEAN", 2, inplace = True)
dftest.replace("NEAR BAY", 3, inplace = True)
dftest.replace("NEAR OCEAN", 4, inplace = True)
dftest.replace("ISLAND", 5, inplace = True)
dftest

y = dftrain["median_house_value"]
x = dftrain.drop(columns= "median_house_value", axis = 1)


x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = .3, random_state = 0)

reg = linear_model.LinearRegression()
reg.fit(x_train, y_train)

print(reg.intercept_)

x_train.shape

x_train.shape

x_test.shape

y_train.shape

y_test.shape

dftest.drop(columns='id', inplace= True)
dftest

print(reg.coef_)
sol = reg.predict(dftest)

"""Prediction"""

#mean_squared_error(y_true=y_test, y_pred=sol)

output = pd.DataFrame({"median_house_value":sol})
output.to_csv("as4sol.csv")